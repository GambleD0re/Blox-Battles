# render.yaml
# Blueprint for deploying the Blox Battles application on Render.
# This file specifies the services, databases, and environment configurations
# required to run the full-stack application.
# Last Updated: 2025-07-23

services:
  # 1. PostgreSQL Database
  # This service provisions a managed PostgreSQL database for the application.
  # It is defined first so other services can reference it.
  - type: pserv
    name: blox-battles-db
    # Render will automatically use the latest major version of PostgreSQL.
    # The database name will be 'blox_battles_db' by default.
    disk:
      name: postgres-data
      sizeGB: 1

  # 2. Backend API Service (Node.js / Express)
  # This is the main web service that runs the backend logic.
  - type: web
    name: bloxbatttles-api # Name matches the URL in the bot script
    env: node
    # The root directory of the backend code.
    rootDir: ./backend
    # Specifies the runtime version. It's good practice to match your local dev environment.
    plan: free # Or your preferred instance type, e.g., "starter"
    # Commands to build and start the service.
    buildCommand: npm install
    startCommand: node server.js
    # Health check endpoint to ensure the service is running correctly.
    healthCheckPath: /api/status
    # Environment variables required by the backend.
    envVars:
      # The DATABASE_URL is automatically injected from the database service defined above.
      - key: DATABASE_URL
        fromDatabase:
          name: blox-battles-db
          property: connectionString
      # The BASE_URL is the public URL of this service, used for generating links.
      - key: BASE_URL
        fromService:
          type: web
          name: bloxbatttles-api
          property: url
      # The FRONTEND_URL is the public URL of the frontend service.
      - key: FRONTEND_URL
        fromService:
          type: web # Corrected from 'static' to 'web'
          name: blox-battles-frontend
          property: url
      # These are secret keys. You MUST set these in the Render dashboard.
      # Setting 'sync: false' prevents them from being committed to your repo.
      - key: JWT_SECRET
        sync: false
      - key: SESSION_SECRET
        sync: false
      - key: BOT_API_KEY
        sync: false
      - key: ADMIN_API_KEY # For securing admin endpoints
        sync: false

  # 3. Frontend Static Site (React / Vite)
  # This service builds and serves the static frontend application.
  - type: web # CORRECTED: The type for a static site is 'web'.
    name: blox-battles-frontend
    runtime: static # CORRECTED: The 'static' specifier belongs in the runtime.
    # The root directory of the frontend code.
    rootDir: ./frontend
    # Commands to build the static assets.
    buildCommand: npm install && npm run build
    # The directory where the built assets are located.
    # Vite's default output directory is 'dist'.
    publishPath: ./dist
    # Rewrite rules are crucial for a single-page application (SPA) and for proxying API requests.
    routes:
      # This rule proxies all API requests made from the frontend to the backend service.
      # This avoids CORS issues and hides the backend URL from the client.
      - type: rewrite
        source: /api/:path*
        destination: https://bloxbatttles-api.onrender.com/api/:path*
      # This rule ensures that all other requests are sent to index.html.
      # This is standard for SPAs to allow client-side routing to work correctly.
      - type: rewrite
        source: /*
        destination: /index.html
